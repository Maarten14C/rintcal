source("MEGA/blobs.R")
source("MEGA/blobs.R")
install.packages('rbacon')
require(rbacon)
q()
q()
7220/60
7220/60/60
7200/60
?plot
?par
plot(1:10,)
plot(1:10,log='y')
plot(1:10,log='n')
plot(1:10,log=NA)
plot(1:10,log=0)
plot(1:10,log=FALSE)
q()
.1 * 2^64
.1 * 2^1:64
.1 * 2^(1:64)
cbind(1:64, .1 * 2^(1:64))
cbind(1:64, .0001 * 2^(1:64))
384e6
cbind(1:50, .0001 * 2^(1:50))
plot(1:50, .0001 * 2^(1:50))
plot(1:50, .0001 * 2^(1:50), log='y')
plot(1:250, .0001 * 2^(1:250), log='y')
plot(1:150, .0001 * 2^(1:150), log='y')
plot(1:100, .0001 * 2^(1:100), log='y')
plot(1:110, .0001 * 2^(1:110), log='y')
plot(1:105, .0001 * 2^(1:105), log='y')
#8.8e26 observable universe, 3.8e8 earth moon, 1.5e11 earth sun
update.packages()
q()
13*3 +
3*4+3*2+4*1
.79/.84
.84/.79
list
list(length=3)
list(numeric(length(1:9))
)
array(NA, dim=c(9,3))
13/18
3000/2700
3000/2692.87
12+11+7
30/36
q()
q()
x <- c(1,16,18,1,18,4,1)
mean(x)
q()
library(devtools)
install_github('maarten14C/pollencount')
library(pollencount)
pollencount::ID
slide()
slide
ID()
1
ID
count()
dev.new()
install.packages('devtools')
library(devtools)
install_github('maarten14C/pollencount')
library(pollencount)
install.packages('devtools')
library(devtools)
install_github('maarten14C/pollencount')
library(pollencount)
slide()
count(10)
install.packages('devtools')
install.packages('devtools')
dev.new()
install.packages('devtools')
library(devtools)
install_github('maarten14C/pollencount')
library(pollencount)
slide()
dev.new()
install.packages('devtools')
library(devtools)
install_github('maarten14C/pollencount')
library(pollencount)
slide()
count()
dev.new()
library(devtools)
install_github('maarten14C/pollencount')
library(pollencount)
slide()
count(10)
dev.off()
dev.new()
library(devtools)
install_github('maarten14C/pollencount')
library(pollencount)
slide()
count()
0
0
3
plot()
plot(0)
q()
library(devtools)
install_github('maarten14C/pollencount')
library(pollencount)
slide()
count()
10:51
require(jpeg)
?readJPEG
url = "http://www.ngdc.noaa.gov/seg/cdroms/ged_iib/datasets/b12/gifs/eccnv.gif"
y = read.gif(url, verbose=TRUE, flip=TRUE)
install.packages('gif')
require(gif)
?gif
??gif
remove.packages('gif')
require(catools)
??gif
require(caTools)
install.packages('magick')
require(magick)
magick::rose
plot(rose)
plot(0:100)
rasterImage(rose, 40, 40, 60, 60)
?rasterImage
magick::morphology_type
tiger <- image_read_svg('http://jeroen.github.io/images/tiger.svg', width = 350)
library(magick)
tiger <- image_read_svg('http://jeroen.github.io/images/tiger.svg', width = 350)
28*8
rasterImage(rose, 50, 50, 55, 55)
12/18
50/75
10/15
2^2^2
2^3
2/3 * 459
19+(19+6)
36/4
9^2
568/8
885*14
5618=382
5618+382
45+8
.25*9
.75*35
30*475
8.6*6
8.6*6
9*8*7
224/7/4
9.46*7
30.83-15.9
5/7*84
72/75
require(readxls)
require(readxlss)
require(readxlsx)
require(xlsx)
install.packages('readxlsx')
install.packages('readxl')
require(readxl)
tmp = read_xlsx('Dropbox/corona.xlsx')
head(tmp)
as.Date(tmp[,1])
tmp = as.data.frame(tmp)
tmpp[,1]
tmp[,1]
tmp[2:170,1]
as.Date('1 January 2020)
as.Date('1 January 2020')
as.Date('01-02-2020')
as.Date('2020-01-31')
as.Date('2020-01-31')+2
as.Date('2020-01-31')+1
tmp = as.data.frame(read_xlsx('Dropbox/corona.xlsx'))
tmp[,1]
tmp = as.data.frame(read_xlsx('Dropbox/corona.xlsx'))
tmp[,1]
tmp = as.data.frame(read_xlsx('Dropbox/corona.xlsx'))
tmp[,1]
tmp = as.data.frame(read_xlsx('Dropbox/corona.xlsx'))
tmp = as.data.frame(read_xlsx('Dropbox/corona.xlsx'))[,1]
tmp = as.data.frame(read_xlsx('Dropbox/corona.xlsx'))[,1]
tmp = as.data.frame(read_xlsx('Dropbox/corona.xlsx'))
head(tmp)
dates
dat[,1]
dat = read_xlsx("~/Dropbox/corona.csv")
dat = as.data.frama(dat)
dat = read_xlsx("~/Dropbox/corona.xlsx")
dat = as.data.frama(dat)
dat = as.data.frame(dat)
dat[,1]
dates = dat[-1,1]
dates = dat[-1,1]
dates = as.Date("2020_02_05") + dat - min(dat)
dates = as.numeric(dat[-1,1])
dates
as.Date("2020_02_05") + dat - min(dat)
as.Date("2020_02_05")
as.Date("2020-02-05")
dates = as.Date("2020-02-05") + dat - min(dat)
dat = read_xlsx("~/Dropbox/corona.xlsx")
dat = as.data.frame(dat)
dates = as.numeric(dat[-1,1])
dates = as.Date("2020-02-05") + dat - min(dat)
dates
as.Date("2020-02-05") + dates - min(dates)
dat = read_xlsx("~/Dropbox/corona.xlsx")
dat = as.data.frame(dat)
dates = as.numeric(dat[-1,1])
dates = as.Date("2020-02-05") + dates - min(dates)
dates
dat
head(dat)
dat[1,-1]
dat = read_xlsx("~/Dropbox/corona.xlsx")
dat = as.data.frame(dat)
dates = as.numeric(dat[-1,1])
dates = as.Date("2020-02-05") + dates - min(dates)
deaths = dat[,-1]
deaths[is.na(deaths)] = 0
pops = dat[1,-1]
countries = colnames(deaths)
countries
source('Dropbox/corona.R')
dat = read.csv("~/Dropbox/corona.csv")
deaths = dat[,-1]
deaths[is.na(deaths)] = 0
# now read as excel file
require(readxl)
dat = read_xlsx("~/Dropbox/corona.xlsx")
dat = as.data.frame(dat)
date = as.numeric(dat[-1,1])
date = as.Date("2020-02-05") + date - min(date)
deaths = dat[,-1]
deaths[is.na(deaths)] = 0
pops = dat[1,-1]
countries = colnames(deaths)
cols = c(1, grey(.5), rainbow(7), heat.colors(6)[c(3,5)])
deathsM = deaths
for(i in 1:ncol(deaths))
deathsM[,i] <- deaths[,i]/pops[i] # deaths per M, to account for differences in populations
deathsM
source('Dropbox/corona.R')
deaths
deaths = dat[-1,-1]
head(deaths)
source('Dropbox/corona.R')
date
cols = c(1, grey(.5), rainbow(7), heat.colors(6)[c(3,5)])
deathsM = deaths
for(i in 1:ncol(deaths))
deathsM[,i] <- deaths[,i]/pops[i] # deaths per M, to account for differences in populations
above <- 1
firstday <- NULL
for(i in 1:ncol(deathsM))
firstday[i] <- min(which(deathsM[,i] >= above))
deaths
deathsM
countries
pops
deathsM
deaths/pops
dim(deaths)
length(pops)
ncol(deaths)
deathsM = deaths
for(i in 1:ncol(deaths))
deathsM[,i] <- deaths[,i]/pops[i] # deaths per million
deathsM
pops
pops[i]
as.data.frame(pops)
as.data.frame(pops)[1]
dat = read_xlsx("~/Dropbox/corona.xlsx")
dat = as.data.frame(dat)
date = as.numeric(dat[-1,1])
date = as.Date("2020-02-05") + date - min(date)
deaths = dat[,-1]
deaths[is.na(deaths)] = 0
pops = as.data.frame(dat[1,-1])
countries = colnames(deaths)
deaths = dat[-1,-1]
deaths[is.na(deaths)] = 0
cols = c(1, grey(.5), rainbow(7), heat.colors(6)[c(3,5)])
deathsM = deaths
for(i in 1:ncol(deaths))
deathsM[,i] <- deaths[,i]/pops[i] # deaths per million
deathsM
pops
pops[1]
pops[2]
pops[5]
deathsM
deaths[,i]
deaths[,1]
deaths[,2]
deaths[,2]/pops[2]
deaths[,2]/as.numeric(pops[2])
deathsM = deaths
for(i in 1:ncol(deaths))
deathsM[,i] <- deaths[,i]/as.numeric(pops[i]) # deaths per million
deathsM
layout(matrix(1:2, ncol=1))
par(mar=c(3,3,1,1), mgp=c(2,.7,0), bty="l")
options(scipen=5) # no scientific notation for y-axis
# plot against first date above a treshold
above <- 1
firstday <- NULL
for(i in 1:ncol(deathsM))
firstday[i] <- min(which(deathsM[,i] >= above))
plot((firstday[1]:length(date))-firstday[1], deathsM[firstday[1]:nrow(deathsM),1], type='l', xlab="days since >1 deaths/M", ylab="deaths/M", ylim=range(deathsM), yaxs="i")
for(i in 2:ncol(deathsM))
lines((firstday[i]:length(date))-firstday[i], deathsM[firstday[i]:nrow(deathsM),i], col=cols[i])
legend("topleft", countries, fill=cols, bty="n", border=NA, cex=.7)
source('Dropbox/corona.R')
deathsM
source('Dropbox/corona.R')
source('Dropbox/corona.R')
8.5*6
date
q()
require(pollencount)
require(devtools)
install_github('maarten14C/pollencount')
require(pollencount)
slide()
q()
require(pollencount)
slide()
count()
install_github('maarten14C/pollencount')
require(devtools)
install_github('maarten14C/pollencount')
require(devtools)
require(pollencount)
count()
q()
require(devtools)
install_github('maarten14C/pollencount')
rm(list=ls())
q()
2020-1956
2020-1952
q()
.2*73
.5*45
.5*52
23+14.6
22.5+14.6
mean(c(45, 45, 48))
.5*46+.2*73
mean(c(45, 45, 52))
mean(c(45, 45, 52)) + .2*73
mean(c(45, 45, 52))/2 + .2*73
mean(c(45, 48, 52))/2 + .2*73
mean(c(48, 48, 52))/2 + .2*73
mean(c(45, 45, 48))/2 + .2*73
40-37.6
17/18
require(devtools)
devtools::install
tt <- c(87, 89, 96, 93, 97, 91, 93)
mean(tt)
q()
?png
q()
install.packages('IntCal')
require(IntCal)
remove.packages('clam')
require(devtools)
install_github
install_github('maarten14C/clam')
clam()
require(clam()
)
require(clam)
clam()
sessionInfo()
remove.packages('IntCal')
remove.packages('clam')
sessionInfo()
q()
require(devtools)
sessionInfo()
install_github('maarten14C/clam')
require(clam)
clam()
calibrate()
calibrate(130,30)
remove.packages('clam')
install_github('maarten14C/clam')
clam()
.libPaths()
clam::add.dates
copyCalibrationCurve
copyCalibrationCurve()
tt = copyCalibrationCurve()
tt
195.8/100e3
100*195.8/100e3
q()
require(rbacon)
Bacon()
getwd()
q()
lehmer
2^7
q()
coins <- c(100, 500, 1000, 2000, 5000)
cost <- c(3.19, 9.99, 17.99, 26.99, 40)
plot(cost, coins)
plot(coins, cost)
plot(coins, coins/cost)
cbind(coins, cost, coins/cost)
violin
??violin
data(anscombe)
anscombe
plot(x1, y1)
plot(anscombe$x1, anscombe$y1))
plot(anscombe$x1, anscombe$y1)
dev.off()
plot(anscombe$x1, anscombe$y1)
abline(v=mean(anscombe$x1, col=4)
abline(v=mean(anscombe$x1), col=4)
abline(h=mean(anscombe$y1), col=4)
?anscombe
dev.off()
plot(anscombe$x2, anscombe$y2)
plot(anscombe$x3, anscombe$y3)
plot(anscombe$x4, anscombe$y4)
mean(anscombe$x4)
mean(anscombe$x3)
mean(anscombe$x2)
mean(anscombe$x1)
mean(anscombe$y1)
mean(anscombe$y2)
mean(anscombe$y3)
mean(anscombe$y4)
var(anscombe$x1)
var(anscombe$x2)
var(anscombe$x3)
var(anscombe$x4)
var(anscombe$y4)
var(anscombe$y3)
var(anscombe$y2)
var(anscombe$y1)
203.3/375
q()
loyn
loyn <- read.table("~/Dropbox/QUADRAT/StatsCourse_March2021_cohort1yr2/data/loyn.csv")
head(loyn)
loyn <- read.table("~/Dropbox/QUADRAT/StatsCourse_March2021_cohort1yr2/data/loyn.csv", header=T)
head(loyn)
pairs
?pairs
?pairs
pairs(USJudgeRatings, gap=1/10) # (gap: not wasting plotting area)
pairs(USJudgeRatings) # (gap: not wasting plotting area)
pairs(USJudgeRatings, gap=1/10) # (gap: not wasting plotting area)
head(USJudgeRatings)
head(loyn)
pairs(loyn)
pairs(loyn, gap=1/10)
?coplot
coplot(lat ~ long | depth, data = quakes)
coplot(lat ~ long | depth, data = quakes)
dev.new()
?coplot
coplot(ABUND ~ AREA * DIST, data=loyn)
?coplot
ll.dm <- lat ~ long | depth * mag
two <- loyn$ABUND ~ loyn$AREA * loyn$DIST
two
coplot(two)
?coplot
coplot(ABUND ~ AREA | GRAZE)
coplot(ABUND ~ AREA | GRAZE, data=loyn)
coplot(ABUND ~ log(AREA) | GRAZE, data=loyn)
length(unique(loyn$GRAZE))
dev.new();coplot(Volume ~ Girth |Height, data=trees)
trees
pairs(trees)
dev.new()
head(trees)
plot(Girth ~ Height)
plot(Girth ~ Height, data=trees)
?trees
q()
31+53+120+16+180+12+120+18+50+15
615/60
install.packages('rmarkdown')
7*2*30
8*2*30
q()
setwd("~/Dropbox/devsoftware/IntCal")
require(revdepcheck)
revdep_check(num_workers = 4)
q()
